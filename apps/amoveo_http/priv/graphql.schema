enum TransactionType {
  COINBASE
  SPEND
  CREATE_ACCOUNT
  DELETE_ACCOUNT
  MULTI
  NEW_CHANNEL
  CHANNEL_TEAM_CLOSE
  CHANNEL_SOLO_CLOSE
  CHANNEL_SLASH
  CHANNEL_TIMEOUT
  ORACLE_NEW
  ORACLE_BET
  ORACLE_CLOSE
  ORACLE_UNMATCHED
  ORACLE_WINNINGS
}

type CoinbaseTransaction {
  type: TransactionType
  to: String
}

type SpendTransaction {
  type: TransactionType
  from: String
  nonce: Int
  fee: String
  to: String
  amount: String
  version: Int
  signature: String
}

type CreateAccountTransaction {
  type: TransactionType
  from: String
  nonce: Int
  fee: String
  pubkey: String
  amount: String
  signature: String
}

union Transaction = CoinbaseTransaction | SpendTransaction

type Block {
  height: Int!
  prev_hash: String
  trees_hash: String
  time: Int
  difficulty: Int
  period: Int
  version: Int
  nonce: String
  market_cap: String
  channels_veo: Int
  live_channels: Int
  many_accounts: Int
  many_oracles: Int
  live_oracles: Int
  transactions: [Transaction]
}

type Header {
  height: Int!
  prev_hash: String
  trees_hash: String
  txs_proof_hash: String
  time: Int
  difficulty: Int
  version: Int
  nonce: String
  accumulative_difficulty: String
  period: Int
}

type Account {
  balance: String
  nonce: Int
  pubkey: String
  bets: String
  bets_hash: String
}

# type Oracle {
#   id: ID!
#   result: String
#   question: String
#   starts: Int
#   type: Int
#   orders: Int
#   creator: String
#   done_timer: Int
#   governance: Int
#   governance_amount: Int
# }
#
# type Key {
#   id: ID
#   pub: String
# }
#
# type Bet {
#   code: String
#   amount: String
#   key: String
#   meta: String
# }

type Query {
  account(pubkey: String): Account
  block(height: Int): Block
  header(height: Int): Header
}
